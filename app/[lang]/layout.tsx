import type { Metadata } from 'next';
import { notFound } from 'next/navigation';
import { Inter, Rubik } from 'next/font/google';
import { NextIntlClientProvider } from 'next-intl';

import { TLang } from '@/types';
import { cn } from '@/lib/utils';
import { ModeToggle } from '@/components/mode-toggle';
import { ThemeProvider } from '@/providers/theme-provider';

import './globals.css';

const inter = Inter({ subsets: ['latin'] });
const rubik = Rubik({ subsets: ['arabic'] });

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app'
};

const langs = ['ar', 'en'];

type TRootLayout = {
  children: React.ReactNode;
  params: { lang: TLang };
};

const RootLayout = async ({ children, params: { lang } }: TRootLayout) => {
  let messages;
  const isValidLocale = langs.some(cur => cur === lang);

  if (!isValidLocale) notFound();

  try {
    messages = (await import(`../../messages/${lang}.json`)).default;
  } catch (error) {
    notFound();
  }

  return (
    <html
      lang={lang}
      suppressHydrationWarning
      dir={lang === 'en' ? 'ltr' : 'rtl'}
    >
      <body
        suppressHydrationWarning
        className={cn(
          'min-h-screen bg-background antialiased',
          lang === 'en' ? inter.className : rubik.className
        )}
      >
        <ThemeProvider
          enableSystem
          attribute="class"
          defaultTheme="dark"
          disableTransitionOnChange
        >
          <NextIntlClientProvider locale={lang} messages={messages}>
            {children}
          </NextIntlClientProvider>
          <ModeToggle lang={lang} />
        </ThemeProvider>
      </body>
    </html>
  );
};

export default RootLayout;
